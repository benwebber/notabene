use crate::diagnostic::Diagnostic;
use crate::ir;
use crate::location::Location;
use crate::rule::Rule;
use crate::span::Span;

pub(crate) trait Check {
    /// Return the `Rule` this check evaluates.
    fn rule(&self) -> Rule;

    /// Return spans that this check matched.
    fn spans(&self) -> &[Span] {
        &[]
    }

    /// Evaluate this check for the entire `Changelog`.
    fn visit_changelog(&mut self, _changelog: &ir::Changelog) {}

    /// Evaluate this check for a `Section`.
    fn visit_section(&mut self, _section: &ir::Section) {}

    /// Evaluate this check for a `Changes`.
    fn visit_changes(&mut self, _changes: &ir::Changes) {}

    /// Publish diagnostics generated by this check.
    fn diagnostics(&self) -> Vec<Diagnostic> {
        self.spans()
            .iter()
            .map(|span| Diagnostic::new(self.rule(), Some(Location::Span(*span))))
            .collect()
    }
}
