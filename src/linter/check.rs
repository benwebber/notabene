use crate::changelog::v2::parsed;
use crate::diagnostic::Diagnostic;
use crate::ir;
use crate::rule::Rule;
use crate::span::Span;

pub(crate) trait Check {
    /// Return the `Rule` this check evaluates.
    fn rule(&self) -> Rule;

    /// Return spans that this check matched.
    fn spans(&self) -> &[Span] {
        &[]
    }

    fn visit_changelog(&mut self, _changelog: &parsed::Changelog) {}
    fn visit_unreleased(&mut self, _unreleased: &parsed::Unreleased) {}
    fn visit_release(&mut self, _release: &parsed::Release) {}
    fn visit_changes(&mut self, _changes: &parsed::Changes) {}
    fn visit_invalid_span(&mut self, _span: &parsed::InvalidSpan) {}

    /// Publish diagnostics generated by this check.
    fn diagnostics(&self) -> Vec<Diagnostic> {
        self.spans()
            .iter()
            .map(|span| Diagnostic::new(self.rule(), Some(*span)))
            .collect()
    }
}
